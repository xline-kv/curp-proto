// Message types for curp client
syntax = "proto3";

package commandpb;

import "curp-error.proto";

option go_package = ".;curpapi";

message ProposeRequest {
    // The serialized command
    // The original type is `Command`
    bytes command = 1;
}

message ProposeResponse {
    optional uint64 leader_id = 1;
    uint64 term = 2;
    oneof exe_result {
        CmdResult result = 3;
        errorpb.ProposeError error = 4;
    }
}

message WaitSyncedRequest {
    string propose_id = 1;
}

message WaitSyncedResponse {
    // The serialized command after sync result
    // The original type is Result<Command::ASR, Command::Error>
    CmdResult after_sync_result = 1;

    // The serialized command execute result
    // The original type is Result<Command::ER, Command::Error>
    CmdResult exe_result = 2;
}

message CmdResult {
    oneof result {
        // The serialized command execute result
        // The original type is Command::ER or Command::ASR
        bytes ok = 1;
        // The serialized command error
        // The original type is Command::Error
        bytes error = 2;
    }
}
