// Message types for curp client
syntax = "proto3";

package commandpb;

import "google/protobuf/empty.proto";

option go_package = ".;curpapi";

message ProposeId {
    uint64 client_id = 1;
    uint64 seq_num = 2;
}

message Member {
    uint64 id = 1;
    string name = 2;
    repeated string addrs = 3;
    bool is_learner = 4;
};

message ProposeRequest {
    // The serialized command
    // The original type is `Command`
    bytes command = 1;
}

message CmdResult {
    oneof result {
        // The serialized command execute result
        // The original type is Command::ER
        bytes ok = 1;
        // The serialized command error
        // The original type is Command::Error
        bytes error = 2;
    }
}

enum ProposeError {
    KeyConflict = 0;
    Duplicated = 1;
}

message ProposeResponse {
    optional uint64 leader_id = 1;
    uint64 term = 2;
    oneof exe_result {
        CmdResult result = 3;
        ProposeError error = 4;
    }
}

message WaitSyncedRequest {
    ProposeId propose_id = 1;
}

message WaitSyncedResponse {
    // The serialized command after sync result
    // The original type is Result<Command::ASR, Command::Error>
    CmdResult after_sync_result = 1;

    // The serialized command execute result
    // The original type is Result<Command::ER, Command::Error>
    CmdResult exe_result = 2;
}

message FetchClusterRequest {
    bool linearizable = 1;
}

message FetchClusterResponse {
    optional uint64 leader_id = 1;
    uint64 term = 2;
    uint64 cluster_id = 3;
    repeated Member members = 4;
}

message FetchReadStateRequest {
    bytes command = 1;
}

message FetchReadStateResponse {
    message IdSet {
        repeated ProposeId ids = 1;
    }
    oneof read_state {
        IdSet ids = 1;
        uint64 commit_index = 2;
    }
}

message ShutdownRequest {
    ProposeId propose_id = 1;
}

message ShutdownResponse {
}

message ProposeConfChangeRequest {
    enum ConfChangeType {
        Add = 0;
        AddLearner = 1;
        Remove = 2;
        Update = 3;
        Promote = 4;
    }
    message ConfChange {
        ConfChangeType change_type = 1;
        uint64 node_id = 2;
        repeated string address = 3;
    }
    ProposeId propose_id = 1;
    repeated ConfChange changes = 2;
}

message ProposeConfChangeResponse {
    oneof error {
        google.protobuf.Empty InvalidConfig = 1;
        google.protobuf.Empty NodeNotExists = 2;
        google.protobuf.Empty NodeAlreadyExists = 3;
        google.protobuf.Empty LearnerNotCatchUp = 4;
        ProposeError propose = 5;
        string other = 6;
    }
    repeated Member members = 7;
    optional uint64 leader_id = 8;
    uint64 term = 9;
}

service Protocol {
    rpc Propose (ProposeRequest) returns (ProposeResponse);
    rpc WaitSynced (WaitSyncedRequest)
            returns (WaitSyncedResponse);
    rpc ProposeConfChange (ProposeConfChangeRequest) returns (ProposeConfChangeResponse);
    rpc Shutdown (ShutdownRequest) returns (ShutdownResponse);
    rpc FetchCluster (FetchClusterRequest) returns (FetchClusterResponse);
    rpc FetchReadState (FetchReadStateRequest) returns (FetchReadStateResponse);
}

