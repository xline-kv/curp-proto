syntax = "proto3";

package messagepb;

option go_package = ".;curpapi";

import "command.proto";
import "error.proto";
import "google/protobuf/empty.proto";


message FetchLeaderRequest {
}

message FetchLeaderResponse {
    optional uint64 leader_id = 1;
    uint64 term = 2;
}

message FetchClusterRequest {
}

message FetchClusterResponse {
    optional uint64 leader_id = 1;
    map<uint64, string> all_members = 2;
    uint64 term = 3;
}

message IdSet {
    repeated bytes ids = 1;
}

message FetchReadStateRequest {
    bytes command = 1;
}

message FetchReadStateResponse {
    oneof read_state {
        IdSet ids = 1;
        uint64 commit_index = 2;
    }
}

message ShutdownRequest {
}

message ShutdownResponse {
    optional uint64 leader_id = 1;
    uint64 term = 2;
    optional errorpb.ProposeError error = 3;
}

message ProposeConfChangeRequest {
    enum ConfChangeType {
        Add = 0;
        AddLearner = 1;
        Remove = 2;
        Update = 3;
        Promote = 4;
    }
    message ConfChange {
        ConfChangeType change_type = 1;
        uint64 node_id = 2;
        repeated string address = 3;
    }
    string id = 1;
    repeated ConfChange changes = 2;
}

message Member {
    uint64 id = 1;
    string name = 2;
    string addrs = 3;
    bool is_learner = 4;
};

message ProposeConfChangeResponse {
    oneof error {
        google.protobuf.Empty InvalidConfig = 1;
        google.protobuf.Empty NodeNotExists = 2;
        google.protobuf.Empty NodeAlreadyExists = 3;
        google.protobuf.Empty LearnerNotCatchUp = 4;
        errorpb.ProposeError propose = 5;
    }
    repeated Member members = 6;
    optional uint64 leader_id = 7;
    uint64 term = 8;
}

service Protocol {
    rpc Propose(commandpb.ProposeRequest) returns (commandpb.ProposeResponse);
    rpc WaitSynced(commandpb.WaitSyncedRequest)
        returns (commandpb.WaitSyncedResponse);
    rpc ProposeConfChange (ProposeConfChangeRequest) returns (ProposeConfChangeResponse);
    rpc Shutdown(ShutdownRequest) returns (ShutdownResponse);
    rpc FetchLeader(FetchLeaderRequest) returns (FetchLeaderResponse);
    rpc FetchCluster(FetchClusterRequest) returns (FetchClusterResponse);
    rpc FetchReadState(FetchReadStateRequest) returns (FetchReadStateResponse);
}
